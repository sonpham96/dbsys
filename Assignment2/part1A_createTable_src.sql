CREATE TABLE CLASS ( CName NVARCHAR2(20) PRIMARY KEY ); --CHECKED

CREATE TABLE PSIZE ( PSize NVARCHAR2(20) PRIMARY KEY ); --CHECKED

CREATE TABLE VEHICLE ( --CHECKED
  RegNumber INT PRIMARY KEY,
  VType NVARCHAR2(20),
  Description NVARCHAR2(50)
);

CREATE TABLE TOPPING ( --CHECKED
  TCode INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  Name NVARCHAR2(20) NOT NULL,
  Price INT NOT NULL
);

CREATE TABLE DRINKS ( --CHECKED
	DCode INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	Name NVARCHAR2(20) NOT NULL,
	Price INT NOT NULL
);

CREATE TABLE CLASS_PRICE ( --CHECKED
  CName NVARCHAR2(20),
  PSize NVARCHAR2(20),
  Price INT NOT NULL,
  CONSTRAINT pk_cp PRIMARY KEY(CName, PSize),
  CONSTRAINT fk_cp_class_cname FOREIGN KEY(CName) REFERENCES CLASS(CName),
  CONSTRAINT fk_cp_psize_psize FOREIGN KEY(PSize) REFERENCES PSIZE(PSize)
);

CREATE TABLE PIZZA ( --CHECKED
  PID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  Name NVARCHAR2(20) NOT NULL UNIQUE,
  CName NVARCHAR2(20) NOT NULL,
  CONSTRAINT fk_pizza_class_cname FOREIGN KEY(CName) REFERENCES CLASS(CName)
);

CREATE TABLE PIZZA_TOPPING ( --CHECKED
  PID INT,
  TCode INT,
  CONSTRAINT pk_pt PRIMARY KEY(PID, TCode),
  CONSTRAINT fk_pt_pizza_pid FOREIGN KEY(PID) REFERENCES PIZZA(PID),
  CONSTRAINT fk_pt_top_tcode FOREIGN KEY(TCode) REFERENCES TOPPING(TCode)
);

CREATE TABLE CUSTOMER ( --CHECKED
	CNumber	INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FName	NVARCHAR2(20)	 NOT NULL,
	LName	NVARCHAR2(20)	 NOT NULL,
	DoB		DATE,
	Email	NVARCHAR2(50)
      CHECK (REGEXP_LIKE (Email, '^[a-z0-9]((\.|_)?[a-z0-9])*@[a-z]+(\.?[a-z]{2,})+$', 'i')),
	Phone	NVARCHAR2(11) NOT NULL,
      CHECK (REGEXP_LIKE(Phone, '^0\d{9,10}$')),
	Address	NVARCHAR2(50) NOT NULL,
	Score INT DEFAULT 0 NOT NULL
);

CREATE TABLE EMPLOYEE ( --CHECKED
  ECode CHAR(5) PRIMARY KEY,
  Fname NVARCHAR2(20) NOT NULL,
  Lname NVARCHAR2(20) NOT NULL,
  Phone NVARCHAR2(11) NOT NULL 
      CHECK (REGEXP_LIKE(Phone, '^0\d{9,10}$')),
  Address NVARCHAR2(50) NOT NULL,  
  IsSalesMan NUMBER(1) NOT NULL 
      CHECK (IsSalesMan = 0 OR IsSalesMan = 1),
  IsShipper NUMBER(1) NOT NULL 
      CHECK (IsShipper = 0 OR IsShipper = 1),
  RegNumber INT,
  CONSTRAINT fk_emp_veh_regnumber FOREIGN KEY(RegNumber) REFERENCES VEHICLE(RegNumber),
  CONSTRAINT ck_emp_type CHECK (IsSalesMan <> IsShipper),
  CONSTRAINT ck_isshipper_regnumber CHECK ((IsShipper = 0 AND RegNumber IS NULL) OR (IsShipper = 1 AND RegNumber IS NOT NULL))
);

CREATE TABLE VOUCHER ( --CHECKED
	VCode INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	Value INT NOT NULL,
	IssueDate DATE NOT NULL,
	ExpirationDate DATE NOT NULL, 
	ECode	CHAR(5) NOT NULL,
	CNumber	INT NOT NULL,
	CONSTRAINT ck_issuedate_expirationdate CHECK (ExpirationDate > IssueDate),
	CONSTRAINT fk_vou_emp_ecode FOREIGN KEY(ECode) REFERENCES EMPLOYEE(ECode),
	CONSTRAINT fk_vou_cus_cnumber FOREIGN KEY(CNumber) REFERENCES CUSTOMER(CNumber)
);

ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
CREATE TABLE ORDER_ (
  OID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  OrderTime DATE DEFAULT SYSDATE NOT NULL,
  DeliveryTime DATE NOT NULL,
  PaymentType CHAR(11) NOT NULL CHECK (PaymentType IN ('Cash', 'Credit Card')),
  Status CHAR(10) DEFAULT 'Processing' NOT NULL CHECK (Status IN ('Done', 'Processing', 'Delivering', 'Cancel')),
  TotalPrice INT,
  CNumber INT NOT NULL,
  ShipperCode CHAR(5) NOT NULL,
  SALESMANCODE CHAR(5) NOT NULL,
  CONSTRAINT ck_deliverytime_ordertime CHECK (DeliveryTime >= OrderTime + 30/1440),
  CONSTRAINT fk_order_cus_cnumber FOREIGN KEY(CNumber) REFERENCES CUSTOMER(CNumber),
  CONSTRAINT fk_order_emp_shippercode FOREIGN KEY(ShipperCode) REFERENCES EMPLOYEE(ECode),
  CONSTRAINT fk_order_emp_salesmancode FOREIGN KEY(SalesmanCode) REFERENCES EMPLOYEE(ECode)
);

CREATE TABLE COMBO (
  CCode INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  Name NVARCHAR2(20) NOT NULL,
  StartDate DATE NOT NULL,
  ExpirationDate DATE,
  Price INT NOT NULL,
  CONSTRAINT ck_startdate_expirationdate CHECK (ExpirationDate >= StartDate OR ExpirationDate IS NULL)
);

CREATE TABLE ORDERED_PIZZA (
  OPID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  PID INT NOT NULL,
  PSize NVARCHAR2(20) NOT NULL,
  Crust CHAR(6) NOT NULL CHECK (Crust IN ('Thin', 'Medium', 'Thick')),
  Price INT,
  OID INT NOT NULL,
  Quantity INT DEFAULT 1 NOT NULL CHECK (Quantity > 0),
  CONSTRAINT fk_op_pizza_pid FOREIGN KEY(PID) REFERENCES PIZZA(PID),
  CONSTRAINT fk_op_psize_psize FOREIGN KEY(PSize) REFERENCES PSIZE(PSize),
  CONSTRAINT fk_op_order_oid FOREIGN KEY(OID) REFERENCES ORDER_(OID)
);

CREATE TABLE ORDERED_TOPPING (
  OPID INT,
  TCode INT,
  Quantity INT DEFAULT 1 NOT NULL CHECK (Quantity > 0),
  CONSTRAINT pk_ot PRIMARY KEY(OPID, TCode),
  CONSTRAINT fk_ot_op_opid FOREIGN KEY(OPID) REFERENCES ORDERED_PIZZA(OPID),
  CONSTRAINT fk_ot_top_TCode FOREIGN KEY(TCode) REFERENCES TOPPING(TCode)
);

CREATE TABLE ORDER_DRINKS (
  OID INT,
  DCode INT,
  Quantity INT DEFAULT 1 NOT NULL CHECK (Quantity > 0),
  CONSTRAINT pk_od PRIMARY KEY(OID, DCode),
  CONSTRAINT fk_od_order_oid FOREIGN KEY(OID) REFERENCES ORDER_(OID),
  CONSTRAINT fk_od_drinks_dcode FOREIGN KEY(DCode) REFERENCES DRINKS(DCode)
);

CREATE TABLE ORDER_COMBO (
  OID INT,
  CCode INT,
  Quantity INT DEFAULT 1 NOT NULL CHECK (Quantity > 0),
  CONSTRAINT pk_oc PRIMARY KEY(OID, CCode),
  CONSTRAINT fk_oc_order_oid FOREIGN KEY(OID) REFERENCES ORDER_(OID),
  CONSTRAINT fk_oc_combo_ccode FOREIGN KEY(CCode) REFERENCES COMBO(CCode)
);

CREATE TABLE COMBO_PIZZA (
  CCode INT,
  PID INT,
  PSize NVARCHAR2(20),
  Quantity int default 1 not null check (Quantity > 0),
  CONSTRAINT pk_cbp PRIMARY KEY(CCode, PID, PSize),
  CONSTRAINT fk_cbp_combo_ccode FOREIGN KEY(CCode) REFERENCES COMBO(CCode),
  CONSTRAINT fk_cbp_pizza_pid FOREIGN KEY(PID) REFERENCES PIZZA(PID),
  CONSTRAINT fk_cbp_psize_psize FOREIGN KEY(PSize) REFERENCES PSIZE(PSize)
);

CREATE TABLE COMBO_DRINKS (
  CCode INT,
  DCode INT,
  Quantity int default 1 not null check (Quantity > 0),
  CONSTRAINT pk_cbd PRIMARY KEY(CCode, DCode),
  CONSTRAINT fk_cbd_combo_ccode FOREIGN KEY(CCode) REFERENCES COMBO(CCode),
  CONSTRAINT fk_cbd_drinks_dcode FOREIGN KEY(DCode) REFERENCES DRINKS(DCode)
);
